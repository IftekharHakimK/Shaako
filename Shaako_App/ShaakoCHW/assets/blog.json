{
    "title": "Sentiment Classification with Bidirectional LSTM on IMDB Dataset",
    "author": "Nutan",
    "content": "<p>We will train model with bidirectional LSTM on the IMDB movie review sentiment classification dataset.</p><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_FderuoaE_Sfs6POZXET-g.jpeg\"><figcaption>Photo by <a href=\"https://unsplash.com/@fkaregan?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Samuel Regan-Asante</a> on <a href=\"https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></figcaption><h3>What is IMDB Dataset?</h3>\n<p>This dataset contains movie reviews posted by people on the IMDb website, as well as the corresponding labels (“positive” or “negative”) indicating whether the reviewer liked the movie or not.</p><p>This is a dataset of 25,000 movies reviews from IMDB, labeled by sentiment (positive/negative). Reviews have been preprocessed, and each review is encoded as a list of word indexes (integers). For convenience, words are indexed by overall frequency in the dataset, so that for instance the integer “3” encodes the 3rd most frequent word in the data. This allows for quick filtering operations such as: “only consider the top 10,000 most common words, but eliminate the top 20 most common words”.</p><p>As a convention, “0” does not stand for a specific word, but instead is used to encode any unknown word.</p>\n<h3>tf.keras.datasets</h3><p>The tf.keras.datasets module provide a few datasets which is already-vectorized, in Numpy format. That can be used for machine learning.</p>\n<h4>Module: tf.keras.datasets.imdb</h4>\n<p>Public API for tf.keras.datasets.imdb namespace.</p><p><strong>Functions</strong></p><p><em>get_word_index</em>(…): Retrieves a dict mapping words to their index in the IMDB dataset.</p><p><em>load_data</em>(…): Loads the IMDB dataset.</p>\n<h3>Load the dataset</h3>\n<pre>import tensorflow as tf</pre>\n<p><strong>tf.keras.datasets.imdb.load_data</strong>(</p><p>path=’imdb.npz’, num_words=None, skip_top=0, maxlen=None, seed=113,<br>start_char=1, oov_char=2, index_from=3, **kwargs</p><p>)<br><strong>Args</strong></p><p><strong><em>path</em></strong>: where to cache the data (relative to ~/.keras/dataset).</p><p><strong><em>num_words</em></strong>: integer or None. Words are ranked by how often they occur (in the training set) and only the num_words most frequent words are kept. Any less frequent word will appear as oov_char value in the sequence data. If None, all words are kept. Defaults to None, so all words are kept.</p><p><strong><em>skip_top</em></strong>: skip the top N most frequently occurring words (which may not be informative). These words will appear as oov_char value in the dataset. Defaults to 0, so no words are skipped.</p><p><strong><em>maxlen</em></strong>: int or None. Maximum sequence length. Any longer sequence will be truncated. Defaults to None, which means no truncation.</p><p><strong><em>seed</em></strong>: int. Seed for reproducible data shuffling.</p><p><strong><em>start_char</em></strong>: int. The start of a sequence will be marked with this character. Defaults to 1 because 0 is usually the padding character.</p><p><strong><em>oov_char</em></strong>: int. The out-of-vocabulary character. Words that were cut out because of the num_words or skip_top limits will be replaced with this character.</p><p><strong><em>index_from</em></strong>: int. Index actual words with this index and higher.</p><p>**<strong><em>kwargs </em></strong>Used for backwards compatibility.</p><p><strong>Returns</strong></p><p><strong><em>Tuple of Numpy arrays</em></strong>: (x_train, y_train), (x_test, y_test).</p><p><strong><em>x_train, x_test</em></strong>: lists of sequences, which are lists of indexes (integers). If the num_words argument was specific, the maximum possible index value is num_words — 1. If the maxlen argument was specified, the largest possible sequence length is maxlen.</p><p><strong><em>y_train, y_test</em></strong>: lists of integer labels (1 or 0).</p>\n<pre>max_features = 20000</pre>\n<pre>(x_train, y_train), (x_test, y_test) = tf.keras.datasets.imdb.load_data(<br>    num_words = max_features<br>)</pre>\n<p><strong>Print x_train, y_train, x_test, y_test</strong></p><pre>x_train.shape</pre>\n<p><em>Output: (25000,)</em></p>"
 }
